import streamlit as st
import pandas as pd
import os
from io import BytesIO
from assurance import AmortizationExtractor

# Configuration de la page
st.set_page_config(
    page_title="Extracteur de Tableau d'Amortissement",
    page_icon="üìä",
    layout="wide"
)

# Titre principal
st.title("üìä Extracteur de Tableau d'Amortissement")
st.markdown("---")

# Description
st.markdown("""
Cette application permet d'extraire automatiquement les tableaux d'amortissement depuis des fichiers PDF 
en utilisant l'API Google Gemini et de les convertir en format structur√© (DataFrame/CSV).
""")

# Sidebar pour la configuration
st.sidebar.header("‚öôÔ∏è Configuration")

# V√©rification de la disponibilit√© de la cl√© API
def check_api_key_availability():
    """V√©rifie si la cl√© API est disponible dans les secrets ou le fichier .env"""
    # V√©rifier les secrets Streamlit
    try:
        api_key_from_secrets = st.secrets.get("GOOGLE_GENAI_API_KEY")
        if api_key_from_secrets:
            return True, "secrets"
    except (AttributeError, FileNotFoundError, KeyError):
        pass
    
    # V√©rifier le fichier .env
    env_file_exists = os.path.exists('.env')
    if env_file_exists:
        from dotenv import load_dotenv
        load_dotenv()
        api_key_from_env = os.getenv('GOOGLE_GENAI_API_KEY')
        if api_key_from_env:
            return True, "env"
    
    return False, None

api_available, source = check_api_key_availability()

if api_available:
    if source == "secrets":
        st.sidebar.success("‚úÖ Cl√© API configur√©e (Secrets Streamlit)")
    else:
        st.sidebar.success("‚úÖ Cl√© API configur√©e (Fichier .env)")
else:
    st.sidebar.error("‚ùå Cl√© API non trouv√©e")
    st.sidebar.markdown("Configurez la cl√© API dans les secrets Streamlit ou cr√©ez un fichier `.env`")

# Interface principale
col1, col2 = st.columns([1, 1])

with col1:
    st.header("üìÑ Upload du fichier PDF")
    
    # Upload de fichier
    uploaded_file = st.file_uploader(
        "Choisissez un fichier PDF contenant un tableau d'amortissement",
        type=['pdf'],
        help="Le fichier doit contenir un tableau d'amortissement lisible"
    )
    
    if uploaded_file is not None:
        st.success(f"Fichier upload√© : {uploaded_file.name}")
        
        # Bouton pour lancer l'extraction
        if st.button("üöÄ Extraire le tableau d'amortissement", type="primary"):
            if not api_available:
                st.error("‚ùå Impossible de continuer sans la cl√© API configur√©e")
            else:
                # Sauvegarde temporaire du fichier
                temp_path = f"temp_{uploaded_file.name}"
                with open(temp_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                try:
                    # Initialisation de l'extracteur
                    with st.spinner("üîÑ Initialisation de l'extracteur..."):
                        extractor = AmortizationExtractor()
                    
                    # Extraction des donn√©es
                    with st.spinner("üîç Extraction des donn√©es du PDF..."):
                        df = extractor.process_pdf_to_dataframe(temp_path)
                    
                    # Nettoyage du fichier temporaire
                    os.remove(temp_path)
                    
                    if df is not None:
                        st.session_state['dataframe'] = df
                        
                        # Calcul des statistiques
                        stats = extractor.calculer_statistiques(df)
                        st.session_state['stats'] = stats
                        
                        st.success("‚úÖ Extraction r√©ussie !")
                    else:
                        st.error("‚ùå √âchec de l'extraction. V√©rifiez le format du PDF.")
                        
                except Exception as e:
                    # Nettoyage du fichier temporaire en cas d'erreur
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
                    st.error(f"‚ùå Erreur lors de l'extraction : {str(e)}")

with col2:
    st.header("üìä R√©sultats")
    
    # Affichage des r√©sultats si disponibles
    if 'dataframe' in st.session_state and 'stats' in st.session_state:
        df = st.session_state['dataframe']
        stats = st.session_state['stats']
        
        # Statistiques principales demand√©es
        st.subheader("ÔøΩ Statistiques principales")
        
        col_stat1, col_stat2 = st.columns(2)
        col_stat3, col_stat4 = st.columns(2)
        
        with col_stat1:
            st.metric(
                "üí∞ Total Assurances", 
                f"{stats['total_assurances']:,.2f} ‚Ç¨",
                help="Somme de toutes les valeurs du champ 'Assurances'"
            )
        
        with col_stat2:
            st.metric(
                "üí∏ Total Int√©r√™ts", 
                f"{stats['total_interets']:,.2f} ‚Ç¨",
                help="Somme de tous les int√©r√™ts"
            )
        
        with col_stat3:
            st.metric(
                "üìÖ Premi√®re √©ch√©ance", 
                stats['premiere_echeance'],
                help="Date de la premi√®re √©ch√©ance du tableau"
            )
        
        with col_stat4:
            st.metric(
                "üìä Nombre d'√©ch√©ances", 
                stats['nombre_echeances'],
                help="Nombre total d'√©ch√©ances dans le tableau"
            )
        
        # Affichage du tableau
        st.subheader("üìã Tableau d'amortissement")
        st.dataframe(df, use_container_width=True)
        
        # Options d'export
        st.subheader("üíæ Export des donn√©es")
        
        col_export1, col_export2 = st.columns(2)
        
        with col_export1:
            # Export CSV
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger en CSV",
                data=csv,
                file_name="tableau_amortissement.csv",
                mime="text/csv"
            )
        
        with col_export2:
            # Export Excel - avec gestion d'erreur pour openpyxl
            try:
                output = BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False, sheet_name='Amortissement')
                excel_data = output.getvalue()
                
                st.download_button(
                    label="üì• T√©l√©charger en Excel",
                    data=excel_data,
                    file_name="tableau_amortissement.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            except ImportError:
                st.error("‚ùå Module openpyxl manquant. Installez-le avec : pip install openpyxl")
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la cr√©ation du fichier Excel : {str(e)}")
    
    else:
        st.info("üëÜ Uploadez un fichier PDF pour voir les r√©sultats ici")

# Section d'aide
st.markdown("---")
st.header("‚ùì Aide")

with st.expander("üîß Configuration requise"):
    st.markdown("""
    **Configuration de la cl√© API :**
    
    **Option 1 - Streamlit Cloud (Recommand√©) :**
    1. Allez dans les param√®tres de votre app sur Streamlit Cloud
    2. Section "Secrets"
    3. Ajoutez votre cl√© API :
    ```toml
    GOOGLE_GENAI_API_KEY = "votre_cle_api_ici"
    ```
    
    **Option 2 - D√©veloppement local :**
    - Cr√©ez un fichier `.env` avec :
    ```
    GOOGLE_GENAI_API_KEY=votre_cle_api_ici
    ```
    
    **Installation des d√©pendances :**
    ```bash
    pip install -r requirements.txt
    ```
    """)

with st.expander("üîê Configuration des secrets Streamlit Cloud"):
    st.markdown("""
    **√âtapes pour configurer les secrets sur Streamlit Cloud :**
    
    1. **Acc√©dez √† votre app** sur [share.streamlit.io](https://share.streamlit.io)
    2. **Cliquez sur les 3 points** √† droite de votre app
    3. **S√©lectionnez "Settings"**
    4. **Allez dans l'onglet "Secrets"**
    5. **Ajoutez votre configuration** au format TOML :
    
    ```toml
    GOOGLE_GENAI_API_KEY = "AIza..."
    ```
    
    6. **Cliquez sur "Save"**
    7. **Votre app va red√©marrer** automatiquement
    
    ‚ö†Ô∏è **Important :** Les secrets sont chiffr√©s et s√©curis√©s sur Streamlit Cloud.
    """)

with st.expander("üìÑ Format de fichier support√©"):
    st.markdown("""
    **Format attendu :**
    - Fichiers PDF contenant des tableaux d'amortissement
    - Le tableau doit √™tre clairement structur√© avec les colonnes :
      - Date d'√©ch√©ance
      - Amortissements
      - Int√©r√™ts
      - Assurances
      - Capital restant d√ª
    """)

with st.expander("üöÄ Utilisation"):
    st.markdown("""
    **√âtapes :**
    1. **Configurez votre cl√© API** :
       - Sur Streamlit Cloud : Utilisez les secrets (voir section d√©di√©e)
       - En local : Cr√©ez un fichier `.env` avec votre cl√© API Google Gemini
    2. **Uploadez votre fichier PDF** contenant le tableau d'amortissement
    3. **Cliquez sur "Extraire le tableau d'amortissement"**
    4. **Consultez les r√©sultats** et exportez en CSV ou Excel
    
    **Note :** L'application d√©tecte automatiquement si vous utilisez Streamlit Cloud ou un environnement local.
    """)

# Footer
st.markdown("---")
st.markdown("*D√©velopp√© avec Streamlit et l'API Google Gemini*")
